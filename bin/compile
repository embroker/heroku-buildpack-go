#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

unset GIT_DIR

# Go releases for Darwin beginning with 1.2rc1
# have included more than one build, depending
# on the specific version of Mac OS X. Try to
# account for that, but don't try too hard.
# This doesn't affect Heroku builds, it's only
# for testing on Darwin systems.
platext() {
    case $(uname|tr A-Z a-z) in
    darwin) printf %s -osx10.8 ;;
    esac
}

urlfor() {
    echo https://storage.googleapis.com/golang/$1
}

mkdir -p "$1" "$2"
BUILD_DIR=$1
echo BUILD_DIR $BUILD_DIR
CACHE_DIR=$2
echo CACHE_DIR $CACHE_DIR
BP_DIR=$(cd "$(dirname $0)/.." && pwd)
echo BP_DIR $BP_DIR
ENV_DIR=$3
echo ENV_DIR $ENV_DIR

export PATH=$BP_DIR/linux-amd64/bin:$PATH

source $BP_DIR/lib/logging.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/binaries.sh

if [ -f "$ENV_DIR/BP_CLEAR_CACHE" ]; then	
	step "Clearing cache"
	rm -rf $CACHE_DIR/*
fi
echo SECONDS $SECONDS

GO_PROJECT_NAME=$(read_json "$BUILD_DIR/server/Godeps/Godeps.json" ".ImportPath")
echo GO_PROJECT_NAME $GO_PROJECT_NAME
GO_VERSION=$(read_json "$BUILD_DIR/server/Godeps/Godeps.json" ".GoVersion")
echo GO_VERSION $GO_VERSION

GO_FILE=${GOFILE:-$GO_VERSION.$(uname|tr A-Z a-z)-amd64$(platext $GO_VERSION).tar.gz}
echo GO_FILE $GO_FILE
GO_URL=${GOURL:-$(urlfor $GO_FILE)}
echo GO_URL $GO_URL

# install Go or get it from cache
GO_CACHE_DIR=$CACHE_DIR/go
GO_DIR=$GO_CACHE_DIR/$GO_VERSION/
if test -d "$GO_DIR"
then
    step "Using $GO_VERSION from cache"
else
    rm -rf $GO_CACHE_DIR/* # clear Go cache
    mkdir -p "$GO_CACHE_DIR"
    cd $GO_CACHE_DIR
    start "Installing $GO_VERSION"
		GO_TAR="go.tar.gz"
		echo GO_URL $GO_URL
		curl $GO_URL --silent --fail --retry 5 --retry-max-time 15  -o $GO_TAR || (echo "Unable to download node $GO_VERSION; does it exist?" && false)
		tar zxf $GO_TAR
		rm -f $GO_TAR
		mv go $GO_VERSION
    finished
fi
echo SECONDS $SECONDS

export GOBIN=$BUILD_DIR/bin
export GOROOT=$GO_DIR
export GOPATH=$BUILD_DIR/.heroku/go
export PATH=$GOROOT/bin:$GOBIN:$PATH

mkdir -p $GOBIN

GO_BUILD_DIR=$GOPATH/src/$GO_PROJECT_NAME/..
echo "Copying go source files to $GO_BUILD_DIR"
echo GO_BUILD_DIR $GO_BUILD_DIR
mkdir -p $GO_BUILD_DIR
cp -R $BUILD_DIR/server $BUILD_DIR/api_spec.json $GO_BUILD_DIR
cd $GO_BUILD_DIR/server
echo SECONDS $SECONDS

# build server
echo "Building server"
godep install
echo SECONDS $SECONDS

# read and resolve Node version
NODE_VERSION=$(read_json "$BUILD_DIR/heroku.json" ".node")
echo ".node (heroku.json):  ${NODE_VERSION:-unspecified}"

if nodejs_version_needs_resolution "$NODE_VERSION"; then
	echo "Resolving node NODE_VERSION ${NODE_VERSION:-(latest stable)} via semver.io..."
	NODE_VERSION=$(curl --silent --get --retry 5 --retry-max-time 15 --data-urlencode "range=${NODE_VERSION}" https://semver.herokuapp.com/node/resolve)
fi

NODE_URL="http://s3pository.heroku.com/node/v$NODE_VERSION/node-v$NODE_VERSION-$OS-$CPU.tar.gz"

# install Node or get it from cache
NODE_CACHE_DIR=$CACHE_DIR/node/
NODE_DIR=$NODE_CACHE_DIR/$NODE_VERSION/
export PATH="$NODE_DIR/bin":$PATH
if test -d $NODE_CACHE_DIR
then
    step "Using Node $NODE_VERSION from cache"
else
    rm -rf $NODE_CACHE_DIR/* # clear Node cache
    mkdir -p "$NODE_CACHE_DIR"
    cd $NODE_CACHE_DIR
    start "Installing $NODE_VERSION"
		NODE_TAR="node.tar.gz"
		curl $NODE_URL --silent --fail --retry 5 --retry-max-time 15 -o $NODE_TAR || (echo "Unable to download node $NODE_VERSION; does it exist?" && false)
		tar xzf $NODE_TAR
		rm -f $NODE_TAR
		mv node-v$NODE_VERSION-$OS-$CPU $NODE_VERSION
    finished
	chmod +x $NODE_DIR/bin/*
	npm install grunt-cli --save-dev -g
fi
echo SECONDS $SECONDS

rm -rf $BUILD_DIR/.heroku

mkdir -p $BUILD_DIR/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $BUILD_DIR/.profile.d/go.sh
cp $BP_DIR/vendor/concurrency.sh $BUILD_DIR/.profile.d/

echo SECONDS $SECONDS